// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0--rc2
// source: ride.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RideServiceClient is the client API for RideService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RideServiceClient interface {
	GetRide(ctx context.Context, in *GetRideRequest, opts ...grpc.CallOption) (*RideResponse, error)
	CreateRide(ctx context.Context, in *CreateRideRequest, opts ...grpc.CallOption) (*RideResponse, error)
	UpdateRideStatus(ctx context.Context, in *UpdateRideStatusRequest, opts ...grpc.CallOption) (*RideResponse, error)
}

type rideServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRideServiceClient(cc grpc.ClientConnInterface) RideServiceClient {
	return &rideServiceClient{cc}
}

func (c *rideServiceClient) GetRide(ctx context.Context, in *GetRideRequest, opts ...grpc.CallOption) (*RideResponse, error) {
	out := new(RideResponse)
	err := c.cc.Invoke(ctx, "/ride.RideService/GetRide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rideServiceClient) CreateRide(ctx context.Context, in *CreateRideRequest, opts ...grpc.CallOption) (*RideResponse, error) {
	out := new(RideResponse)
	err := c.cc.Invoke(ctx, "/ride.RideService/CreateRide", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rideServiceClient) UpdateRideStatus(ctx context.Context, in *UpdateRideStatusRequest, opts ...grpc.CallOption) (*RideResponse, error) {
	out := new(RideResponse)
	err := c.cc.Invoke(ctx, "/ride.RideService/UpdateRideStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RideServiceServer is the server API for RideService service.
// All implementations must embed UnimplementedRideServiceServer
// for forward compatibility
type RideServiceServer interface {
	GetRide(context.Context, *GetRideRequest) (*RideResponse, error)
	CreateRide(context.Context, *CreateRideRequest) (*RideResponse, error)
	UpdateRideStatus(context.Context, *UpdateRideStatusRequest) (*RideResponse, error)
	mustEmbedUnimplementedRideServiceServer()
}

// UnimplementedRideServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRideServiceServer struct {
}

func (UnimplementedRideServiceServer) GetRide(context.Context, *GetRideRequest) (*RideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRide not implemented")
}
func (UnimplementedRideServiceServer) CreateRide(context.Context, *CreateRideRequest) (*RideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRide not implemented")
}
func (UnimplementedRideServiceServer) UpdateRideStatus(context.Context, *UpdateRideStatusRequest) (*RideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRideStatus not implemented")
}
func (UnimplementedRideServiceServer) mustEmbedUnimplementedRideServiceServer() {}

// UnsafeRideServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RideServiceServer will
// result in compilation errors.
type UnsafeRideServiceServer interface {
	mustEmbedUnimplementedRideServiceServer()
}

func RegisterRideServiceServer(s grpc.ServiceRegistrar, srv RideServiceServer) {
	s.RegisterService(&RideService_ServiceDesc, srv)
}

func _RideService_GetRide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RideServiceServer).GetRide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ride.RideService/GetRide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RideServiceServer).GetRide(ctx, req.(*GetRideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RideService_CreateRide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RideServiceServer).CreateRide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ride.RideService/CreateRide",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RideServiceServer).CreateRide(ctx, req.(*CreateRideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RideService_UpdateRideStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRideStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RideServiceServer).UpdateRideStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ride.RideService/UpdateRideStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RideServiceServer).UpdateRideStatus(ctx, req.(*UpdateRideStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RideService_ServiceDesc is the grpc.ServiceDesc for RideService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RideService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ride.RideService",
	HandlerType: (*RideServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRide",
			Handler:    _RideService_GetRide_Handler,
		},
		{
			MethodName: "CreateRide",
			Handler:    _RideService_CreateRide_Handler,
		},
		{
			MethodName: "UpdateRideStatus",
			Handler:    _RideService_UpdateRideStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ride.proto",
}
